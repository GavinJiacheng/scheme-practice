(load "myeval.scm")
(define my-connection
  (lambda(A B)
    (cond
      (not(list? B) (cons A (cons B '())))
      (else (cons A B))
    )
   )
)

(define simplify
    (lambda (expr)
        (cond
            ((is-literal? expr)   expr)
            ((isselfcal? expr)   (simplifyselfcal expr))
            ((op? expr)
                (let ((op (second expr))
                    )
                    (cond
                        ((equal? op '+) (cond
                                            ((equal? (simplify (first expr)) 0) (simplify (third expr)))
                                            ((equal? (simplify (third expr)) 0) (simplify (first expr)))
                                            (else (cons (simplify (first expr))
                                                                 (my-connection '+ (simplify (third expr)))
                                                  )
                                            )
                                        )
                        )
                        ((equal? op '-) (cond
                                            ((equal? (simplify (third expr)) 0) (simplify (first expr)))
                                            ((equal? (simplify (third expr)) (simplify (first expr))) 0)
                                            (else (cons (simplify (first expr))
                                                                 (my-connection '- (simplify (third expr)))
                                                  )
                                            )
                                        )
                        )
                        ((equal? op '*) (cond
                                            ((equal? (simplify (first expr)) 0) 0)
                                            ((equal? (simplify (third expr)) 0) 0)
                                            ((equal? (simplify (first expr)) 1) (simplify (third expr)))
                                            ((equal? (simplify (third expr)) 1) (simplify (first expr)))
                                            (else (cons (simplify (first expr))
                                                                 (my-connection '* (simplify (third expr)))
                                                  )
                                            )
                                        )
                        )
                        ((equal? op '/) (cond
                                            ((equal? (simplify (third expr)) 1) (simplify (first expr)))
                                            (else (cons (simplify (first expr))
                                                                 (my-connection '/ (simplify (third expr)))
                                                  )
                                            )
                                        )
                        )
                        ((equal? op '**) (cond
                                            ((equal? (simplify (third expr)) 0) 1)
                                            ((equal? (simplify (third expr)) 1) (simplify (first expr)))
                                            ((equal? (simplify (first expr)) 1) 1)
                                            (else (cons (simplify (first expr))
                                                                 (my-connection '** (simplify (third expr)))
                                                  )
                                            )
                                        )
                        )
                        (else
                            (error "invalid expression"))
                      )
                )
            )
        )
    )
)

(define simplifyselfcal
    (lambda (e)
        (cond
          ((isadd? e)
                    (cond
                          ((is-number? (simplify (second e))) (+ (second e) 1))
                            (else  (cons 'inc (simplify (second e))))
                    )
                    )
          ((issub? e)
                    (cond
                          ((is-number? (simplify (second e))) (- (second e) 1))
                            (else  (cons 'dec (simplify (second e))))
                     )
          )
          (else error "invalid expression")
        )
    )
)
