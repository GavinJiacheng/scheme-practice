(load "env1.scm")
(define nlist?
    (lambda (n lst)
        (and (list? lst)
             (= n (length lst))
        )
    )
)
(define is-bin-op?
    (lambda (e op)
        (and (nlist? 3 e)
             (equal? op (second e))
        )
    )
)
(define op?
    (lambda (e)
      (or (is-bin-op? e '+)
            (or (is-bin-op? e '-)
                (or (is-bin-op? e '*)
                    (or (is-bin-op? e '/)
                        (is-bin-op? e '**)
                    )
                )
              )
        )
      )
)
(define is-var?
    (lambda (var)
      (symbol? var)
    )
)
(define is-number?
    (lambda (val)
      (number? val)
    )
)
(define is-literal?
    (lambda (e)
        (or (is-var? e)
            (is-number? e))
    )
)
(define isadd?
    (lambda (e)
        (and (nlist? 2 e)
             (equal? (first e) 'inc)
        )
    )
)
(define issub?
    (lambda (e)
        (and (nlist? 2 e)
             (equal? (first e) 'dec)
        )
    )
)
(define isselfcal?
    (lambda (e)
            (or (isadd? e)
                (issub? e))
    )
)
(define is-expr?
    (lambda (e)
        (cond
            ((is-literal? e)
                #t)
            ((isselfcal? e)
                (is-expr? (second e)))
            ((op? e)
                (and (is-expr? (first e))
                     (is-expr? (third e))))
            (else
                #f)
        )
    )
)
(define (myeval expr env)
        (cond
            ((is-number? expr)
                expr)
            ((is-var? expr)
                (apply-env env expr))
            ((isadd? expr) (+ (myeval(second expr) env) 1))  ;; (expr++)
            ((issub? expr) (- (myeval(second expr) env) 1))
            ((op? expr)
                (let ((op (second expr))
                    )
                    (cond
                        ((equal? op '+) (+ (myeval (first expr) env) (myeval (third expr) env)))
                        ((equal? op '-) (- (myeval (first expr) env) (myeval (third expr) env)))
                        ((equal? op '*) (* (myeval (first expr) env) (myeval (third expr) env)))
                        ((equal? op '/) (/ (myeval (first expr) env) (myeval (third expr) env)))
                        ((equal? op '**) (** (myeval (first expr) env) (myeval (third expr) env)))
                      )
                )
            )
            (else
                (error "invalid expression"))
        )
)
